plugins {
    // Ref here: https://docs.gradle.org/7.4.1/userguide/publishing_setup.html
    id 'java-library'
    id 'application'
    id 'signing'
    id 'maven-publish'
    id("com.github.johnrengelman.shadow") version "7.1.2"
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

group = 'ro.ghionoiu'
version = project.version.toString()


repositories {
    mavenCentral()
    mavenLocal()
}


/**
 * Design:
 * Humble-video is composed of two jar files _noarch + native.
 * The _noarch contains the API while the native jar contains
 * the JNI libraries required to interface with the Native codecs
 *
 * So:
 * - the shadowJar task needs to be called with -PvideoArch=<platform> in order to select the lib
 * - the test includes all the native libraries to be cross-platform
 * - there is no native library configured for the compile target
 */
ext {
    humbleVideoVersion = '0.2.1'
    jettyVersion = '9.4.7.v20170914'

    humbleVideoBundleName="unset"
    videoArch = project.getProperties().getOrDefault("videoArch", "unset")
    switch (videoArch) {
        case 'linux':
            humbleVideoBundleName = "x86_64-pc-linux-gnu6"
            break
        case 'macos':
            humbleVideoBundleName = "x86_64-apple-darwin12"
            break
        case 'windows':
            humbleVideoBundleName = "x86_64-w64-mingw32"
            break
    }
}

dependencies {
    implementation 'io.humble:humble-video-noarch:'+humbleVideoVersion
    implementation 'com.beust:jcommander:1.64'

    implementation 'org.slf4j:slf4j-api:1.7.25'
    implementation 'ch.qos.logback:logback-classic:1.1.3'

    // Add the OS specific binaries
    if (humbleVideoBundleName != "unset") {
        println 'Native video library humble-video '+humbleVideoBundleName+' - '+humbleVideoVersion+' will be bundled with the jar'
        implementation 'io.humble:humble-video-arch-'+humbleVideoBundleName+':'+humbleVideoVersion
        archivesBaseName = archivesBaseName + "-" + videoArch
    }

    testImplementation 'io.humble:humble-video-all:'+humbleVideoVersion
    testImplementation 'com.google.zxing:core:3.3.0'
    testImplementation('org.junit.jupiter:junit-jupiter:5.9.1')
    testImplementation('org.junit.platform:junit-platform-suite:1.8.1')
    testImplementation 'org.hamcrest:hamcrest-all:1.3'
}

test {
    useJUnitPlatform()
    systemProperty("cucumber.junit-platform.naming-strategy", "long")
    testLogging {
        events "passed", "skipped", "failed"
    }
}

mainClassName = "tdl.record.screen.ScreenRecorderCliApp"
jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

java {
    withSourcesJar()
    withJavadocJar()
}

// Suppress Javadoc warnings
javadoc {
    options.addStringOption('Xdoclint:none', '-quiet')
}

shadowJar {
    manifest {
        attributes 'Main-Class': "$mainClassName"
        attributes 'Humble-Native-Paths': "."
        attributes 'Humble-Native-Bundles': "$humbleVideoBundleName"
        attributes 'Humble-Native-App': "humble-video"
        attributes 'Humble-Native-Root': "."
    }
}

// Refs:
// https://stackoverflow.com/a/68505768
publishing {
    publications {
        release(MavenPublication) {
            from components.java
            pom {
                name = 'Programming Session Recorder'
                description = 'Library designed for recording programming sessions.'
                url = 'https://github.com/julianghionoiu/dev-screen-record'
                licenses {
                    license {
                        name = 'Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        name = 'Iulian (Julian) Ghionoiu'
                        email = 'iulian.ghionoiu@gmail.com'
                        organization = 'Iulian Ghionoiu'
                        organizationUrl = 'https://github.com/julianghionoiu'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:julianghionoiu/dev-screen-record.git'
                    developerConnection = 'scm:git:git@github.com:julianghionoiu/dev-screen-record.git'
                    url = 'git@github.com:julianghionoiu/dev-screen-record.git'
                }
            }
        }
    }
    repositories {
        maven {
            url = uri("https://oss.sonatype.org/service/local/staging/deploy/maven2/")
            credentials {
                username = project.findProperty('mavenCentralUsername')
                password = project.findProperty('mavenCentralPassword')
            }
        }
    }
}

// Signs using gpg-agent
// Key name configured under "~/.gradle/gradle.properties"
//
// Refs:
// https://docs.gradle.org/7.4.1/userguide/signing_plugin.html#sec:using_gpg_agent
signing {
    useGpgCmd()
    sign publishing.publications.release
}

